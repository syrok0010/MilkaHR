//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ICandidatesClient {
    addCandidate(command: AddCandidateCommand): Observable<Candidate>;
    getAllCandidates(ageFrom: number | null | undefined, ageTo: number | null | undefined, workExperience: number | null | undefined, tags: string[] | null | undefined, jobTitles: string[] | null | undefined, statuses: CandidateStatus[] | null | undefined): Observable<Candidate[]>;
    updateCandidate(id: number, command: UpdateCandidateByIdCommand): Observable<void>;
    removeCandidate(id: number): Observable<void>;
    getCandidate(id: number): Observable<void>;
    getCandidatesCountsByJobs(): Observable<void>;
    getApiCandidatesCandidatesByStatusByJob(): Observable<{ [key: string]: number[]; }>;
}

@Injectable({
    providedIn: 'root'
})
export class CandidatesClient implements ICandidatesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    addCandidate(command: AddCandidateCommand): Observable<Candidate> {
        let url_ = this.baseUrl + "/api/Candidates";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddCandidate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddCandidate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Candidate>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Candidate>;
        }));
    }

    protected processAddCandidate(response: HttpResponseBase): Observable<Candidate> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Candidate.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllCandidates(ageFrom: number | null | undefined, ageTo: number | null | undefined, workExperience: number | null | undefined, tags: string[] | null | undefined, jobTitles: string[] | null | undefined, statuses: CandidateStatus[] | null | undefined): Observable<Candidate[]> {
        let url_ = this.baseUrl + "/api/Candidates?";
        if (ageFrom !== undefined && ageFrom !== null)
            url_ += "AgeFrom=" + encodeURIComponent("" + ageFrom) + "&";
        if (ageTo !== undefined && ageTo !== null)
            url_ += "AgeTo=" + encodeURIComponent("" + ageTo) + "&";
        if (workExperience !== undefined && workExperience !== null)
            url_ += "WorkExperience=" + encodeURIComponent("" + workExperience) + "&";
        if (tags !== undefined && tags !== null)
            tags && tags.forEach(item => { url_ += "Tags=" + encodeURIComponent("" + item) + "&"; });
        if (jobTitles !== undefined && jobTitles !== null)
            jobTitles && jobTitles.forEach(item => { url_ += "JobTitles=" + encodeURIComponent("" + item) + "&"; });
        if (statuses !== undefined && statuses !== null)
            statuses && statuses.forEach(item => { url_ += "Statuses=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllCandidates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCandidates(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Candidate[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Candidate[]>;
        }));
    }

    protected processGetAllCandidates(response: HttpResponseBase): Observable<Candidate[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Candidate.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateCandidate(id: number, command: UpdateCandidateByIdCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Candidates/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCandidate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCandidate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateCandidate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    removeCandidate(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Candidates/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveCandidate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveCandidate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processRemoveCandidate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getCandidate(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Candidates/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCandidate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCandidate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetCandidate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getCandidatesCountsByJobs(): Observable<void> {
        let url_ = this.baseUrl + "/api/Candidates/get-candidates-count-by-jobs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCandidatesCountsByJobs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCandidatesCountsByJobs(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetCandidatesCountsByJobs(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getApiCandidatesCandidatesByStatusByJob(): Observable<{ [key: string]: number[]; }> {
        let url_ = this.baseUrl + "/api/Candidates/candidates-by-status-by-job";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetApiCandidatesCandidatesByStatusByJob(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetApiCandidatesCandidatesByStatusByJob(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: number[]; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: number[]; }>;
        }));
    }

    protected processGetApiCandidatesCandidatesByStatusByJob(response: HttpResponseBase): Observable<{ [key: string]: number[]; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)![key] = resultData200[key] !== undefined ? resultData200[key] : [];
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IJobsClient {
    getJobsByMonthStats(): Observable<{ [key: string]: number; }>;
    getJobsCountByPriority(): Observable<StatisticByPriority[]>;
    getAverageJobLifetime(): Observable<{ [key: string]: number; }>;
    createJob(command: CreateJobCommand): Observable<Job>;
    updateJob(id: number, command: UpdateJobCommand): Observable<void>;
}

@Injectable({
    providedIn: 'root'
})
export class JobsClient implements IJobsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getJobsByMonthStats(): Observable<{ [key: string]: number; }> {
        let url_ = this.baseUrl + "/api/Jobs/monthly-stats";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetJobsByMonthStats(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetJobsByMonthStats(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: number; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: number; }>;
        }));
    }

    protected processGetJobsByMonthStats(response: HttpResponseBase): Observable<{ [key: string]: number; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)![key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getJobsCountByPriority(): Observable<StatisticByPriority[]> {
        let url_ = this.baseUrl + "/api/Jobs/jobs-count-by-priority";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetJobsCountByPriority(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetJobsCountByPriority(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StatisticByPriority[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StatisticByPriority[]>;
        }));
    }

    protected processGetJobsCountByPriority(response: HttpResponseBase): Observable<StatisticByPriority[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(StatisticByPriority.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAverageJobLifetime(): Observable<{ [key: string]: number; }> {
        let url_ = this.baseUrl + "/api/Jobs/average-lifetime";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAverageJobLifetime(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAverageJobLifetime(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: number; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: number; }>;
        }));
    }

    protected processGetAverageJobLifetime(response: HttpResponseBase): Observable<{ [key: string]: number; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)![key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createJob(command: CreateJobCommand): Observable<Job> {
        let url_ = this.baseUrl + "/api/Jobs/create-job";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateJob(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateJob(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Job>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Job>;
        }));
    }

    protected processCreateJob(response: HttpResponseBase): Observable<Job> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Job.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateJob(id: number, command: UpdateJobCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Jobs/update-job?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateJob(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateJob(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateJob(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IRecruiterClient {
    createRecruiter(command: CreateRecruiterCommand): Observable<Recruiter>;
    updateRecruiter(id: number, command: UpdateRecruiterCommand): Observable<void>;
    deleteRecruiter(id: number): Observable<void>;
    getRecruiterById(id: number): Observable<void>;
    getAllRecruiters(): Observable<Recruiter[]>;
    setInterview(command: SetInterviewCommand): Observable<Interview>;
    setCandidateStatus(processingId: number, command: SetCandidateStatusCommand): Observable<void>;
    deleteNote(id: number): Observable<void>;
    createNote(command: CreateNoteCommand): Observable<Note>;
    completeNote(id: number): Observable<void>;
    getAllNotes(): Observable<Note[]>;
    getApiRecruiterInterviews(): Observable<Interview[]>;
}

@Injectable({
    providedIn: 'root'
})
export class RecruiterClient implements IRecruiterClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createRecruiter(command: CreateRecruiterCommand): Observable<Recruiter> {
        let url_ = this.baseUrl + "/api/Recruiter/create-recruiter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateRecruiter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateRecruiter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Recruiter>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Recruiter>;
        }));
    }

    protected processCreateRecruiter(response: HttpResponseBase): Observable<Recruiter> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Recruiter.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateRecruiter(id: number, command: UpdateRecruiterCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Recruiter/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRecruiter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRecruiter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateRecruiter(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteRecruiter(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Recruiter/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteRecruiter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteRecruiter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteRecruiter(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getRecruiterById(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Recruiter/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecruiterById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecruiterById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetRecruiterById(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllRecruiters(): Observable<Recruiter[]> {
        let url_ = this.baseUrl + "/api/Recruiter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRecruiters(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRecruiters(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Recruiter[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Recruiter[]>;
        }));
    }

    protected processGetAllRecruiters(response: HttpResponseBase): Observable<Recruiter[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Recruiter.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    setInterview(command: SetInterviewCommand): Observable<Interview> {
        let url_ = this.baseUrl + "/api/Recruiter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetInterview(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetInterview(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Interview>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Interview>;
        }));
    }

    protected processSetInterview(response: HttpResponseBase): Observable<Interview> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Interview.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    setCandidateStatus(processingId: number, command: SetCandidateStatusCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Recruiter/set-status/{processingId}";
        if (processingId === undefined || processingId === null)
            throw new Error("The parameter 'processingId' must be defined.");
        url_ = url_.replace("{processingId}", encodeURIComponent("" + processingId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetCandidateStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetCandidateStatus(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetCandidateStatus(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteNote(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Recruiter/note/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteNote(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteNote(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createNote(command: CreateNoteCommand): Observable<Note> {
        let url_ = this.baseUrl + "/api/Recruiter/create-note";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateNote(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Note>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Note>;
        }));
    }

    protected processCreateNote(response: HttpResponseBase): Observable<Note> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Note.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    completeNote(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Recruiter/complete-note?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCompleteNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCompleteNote(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCompleteNote(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllNotes(): Observable<Note[]> {
        let url_ = this.baseUrl + "/api/Recruiter/get-notes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllNotes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllNotes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Note[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Note[]>;
        }));
    }

    protected processGetAllNotes(response: HttpResponseBase): Observable<Note[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Note.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getApiRecruiterInterviews(): Observable<Interview[]> {
        let url_ = this.baseUrl + "/api/Recruiter/interviews";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetApiRecruiterInterviews(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetApiRecruiterInterviews(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Interview[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Interview[]>;
        }));
    }

    protected processGetApiRecruiterInterviews(response: HttpResponseBase): Observable<Interview[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Interview.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export abstract class BaseEntity implements IBaseEntity {
    id?: number;
    domainEvents?: BaseEvent[];

    constructor(data?: IBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                this.domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    this.domainEvents!.push(BaseEvent.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBaseEntity {
    id?: number;
    domainEvents?: BaseEvent[];
}

export abstract class BaseAuditableEntity extends BaseEntity implements IBaseAuditableEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date;
    lastModifiedBy?: string | undefined;

    constructor(data?: IBaseAuditableEntity) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
        }
    }

    static override fromJS(data: any): BaseAuditableEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseAuditableEntity' cannot be instantiated.");
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        super.toJSON(data);
        return data;
    }
}

export interface IBaseAuditableEntity extends IBaseEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date;
    lastModifiedBy?: string | undefined;
}

export class Candidate extends BaseAuditableEntity implements ICandidate {
    name?: string;
    lastName?: string;
    middleName?: string;
    email?: string;
    phone?: string;
    address?: string;
    cvs?: Cv[];
    photo?: string | undefined;
    birthDate?: Date;
    workExperience?: number;
    lastJob?: string;
    tags?: string[];
    education?: string;
    jobStatuses?: CandidateJobProcessing[];
    interviews?: Interview[];

    constructor(data?: ICandidate) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.address = _data["address"];
            if (Array.isArray(_data["cvs"])) {
                this.cvs = [] as any;
                for (let item of _data["cvs"])
                    this.cvs!.push(Cv.fromJS(item));
            }
            this.photo = _data["photo"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.workExperience = _data["workExperience"];
            this.lastJob = _data["lastJob"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            this.education = _data["education"];
            if (Array.isArray(_data["jobStatuses"])) {
                this.jobStatuses = [] as any;
                for (let item of _data["jobStatuses"])
                    this.jobStatuses!.push(CandidateJobProcessing.fromJS(item));
            }
            if (Array.isArray(_data["interviews"])) {
                this.interviews = [] as any;
                for (let item of _data["interviews"])
                    this.interviews!.push(Interview.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Candidate {
        data = typeof data === 'object' ? data : {};
        let result = new Candidate();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["address"] = this.address;
        if (Array.isArray(this.cvs)) {
            data["cvs"] = [];
            for (let item of this.cvs)
                data["cvs"].push(item.toJSON());
        }
        data["photo"] = this.photo;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["workExperience"] = this.workExperience;
        data["lastJob"] = this.lastJob;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["education"] = this.education;
        if (Array.isArray(this.jobStatuses)) {
            data["jobStatuses"] = [];
            for (let item of this.jobStatuses)
                data["jobStatuses"].push(item.toJSON());
        }
        if (Array.isArray(this.interviews)) {
            data["interviews"] = [];
            for (let item of this.interviews)
                data["interviews"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ICandidate extends IBaseAuditableEntity {
    name?: string;
    lastName?: string;
    middleName?: string;
    email?: string;
    phone?: string;
    address?: string;
    cvs?: Cv[];
    photo?: string | undefined;
    birthDate?: Date;
    workExperience?: number;
    lastJob?: string;
    tags?: string[];
    education?: string;
    jobStatuses?: CandidateJobProcessing[];
    interviews?: Interview[];
}

export class Cv extends BaseAuditableEntity implements ICv {
    candidate?: Candidate;
    jobs?: Job[];

    constructor(data?: ICv) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.candidate = _data["candidate"] ? Candidate.fromJS(_data["candidate"]) : <any>undefined;
            if (Array.isArray(_data["jobs"])) {
                this.jobs = [] as any;
                for (let item of _data["jobs"])
                    this.jobs!.push(Job.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Cv {
        data = typeof data === 'object' ? data : {};
        let result = new Cv();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["candidate"] = this.candidate ? this.candidate.toJSON() : <any>undefined;
        if (Array.isArray(this.jobs)) {
            data["jobs"] = [];
            for (let item of this.jobs)
                data["jobs"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ICv extends IBaseAuditableEntity {
    candidate?: Candidate;
    jobs?: Job[];
}

export class Job extends BaseAuditableEntity implements IJob {
    title?: string;
    priority?: PriorityLevel;
    status?: JobStatus;
    publicationDate?: Date;
    closingDate?: Date | undefined;
    recruiter?: Recruiter;
    category?: JobCategory;
    candidateStatuses?: CandidateJobProcessing[];

    constructor(data?: IJob) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.title = _data["title"];
            this.priority = _data["priority"];
            this.status = _data["status"];
            this.publicationDate = _data["publicationDate"] ? new Date(_data["publicationDate"].toString()) : <any>undefined;
            this.closingDate = _data["closingDate"] ? new Date(_data["closingDate"].toString()) : <any>undefined;
            this.recruiter = _data["recruiter"] ? Recruiter.fromJS(_data["recruiter"]) : <any>undefined;
            this.category = _data["category"];
            if (Array.isArray(_data["candidateStatuses"])) {
                this.candidateStatuses = [] as any;
                for (let item of _data["candidateStatuses"])
                    this.candidateStatuses!.push(CandidateJobProcessing.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Job {
        data = typeof data === 'object' ? data : {};
        let result = new Job();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["priority"] = this.priority;
        data["status"] = this.status;
        data["publicationDate"] = this.publicationDate ? this.publicationDate.toISOString() : <any>undefined;
        data["closingDate"] = this.closingDate ? this.closingDate.toISOString() : <any>undefined;
        data["recruiter"] = this.recruiter ? this.recruiter.toJSON() : <any>undefined;
        data["category"] = this.category;
        if (Array.isArray(this.candidateStatuses)) {
            data["candidateStatuses"] = [];
            for (let item of this.candidateStatuses)
                data["candidateStatuses"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IJob extends IBaseAuditableEntity {
    title?: string;
    priority?: PriorityLevel;
    status?: JobStatus;
    publicationDate?: Date;
    closingDate?: Date | undefined;
    recruiter?: Recruiter;
    category?: JobCategory;
    candidateStatuses?: CandidateJobProcessing[];
}

export enum PriorityLevel {
    VeryLow = 0,
    Low = 1,
    Medium = 2,
    High = 3,
    VeryHigh = 4,
}

export enum JobStatus {
    Closed = 0,
    Postponed = 1,
    Opened = 2,
}

export class Recruiter extends BaseAuditableEntity implements IRecruiter {
    name?: string;
    lastName?: string;
    middleName?: string;
    email?: string;
    phone?: string;
    workExperience?: number;
    jobs?: Job[];
    interviews?: Interview[];

    constructor(data?: IRecruiter) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.workExperience = _data["workExperience"];
            if (Array.isArray(_data["jobs"])) {
                this.jobs = [] as any;
                for (let item of _data["jobs"])
                    this.jobs!.push(Job.fromJS(item));
            }
            if (Array.isArray(_data["interviews"])) {
                this.interviews = [] as any;
                for (let item of _data["interviews"])
                    this.interviews!.push(Interview.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Recruiter {
        data = typeof data === 'object' ? data : {};
        let result = new Recruiter();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["workExperience"] = this.workExperience;
        if (Array.isArray(this.jobs)) {
            data["jobs"] = [];
            for (let item of this.jobs)
                data["jobs"].push(item.toJSON());
        }
        if (Array.isArray(this.interviews)) {
            data["interviews"] = [];
            for (let item of this.interviews)
                data["interviews"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IRecruiter extends IBaseAuditableEntity {
    name?: string;
    lastName?: string;
    middleName?: string;
    email?: string;
    phone?: string;
    workExperience?: number;
    jobs?: Job[];
    interviews?: Interview[];
}

export class Interview extends BaseAuditableEntity implements IInterview {
    timing?: Date;
    job?: Job;
    candidate?: Candidate;
    type?: EventType;

    constructor(data?: IInterview) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.timing = _data["timing"] ? new Date(_data["timing"].toString()) : <any>undefined;
            this.job = _data["job"] ? Job.fromJS(_data["job"]) : <any>undefined;
            this.candidate = _data["candidate"] ? Candidate.fromJS(_data["candidate"]) : <any>undefined;
            this.type = _data["type"];
        }
    }

    static override fromJS(data: any): Interview {
        data = typeof data === 'object' ? data : {};
        let result = new Interview();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timing"] = this.timing ? this.timing.toISOString() : <any>undefined;
        data["job"] = this.job ? this.job.toJSON() : <any>undefined;
        data["candidate"] = this.candidate ? this.candidate.toJSON() : <any>undefined;
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface IInterview extends IBaseAuditableEntity {
    timing?: Date;
    job?: Job;
    candidate?: Candidate;
    type?: EventType;
}

export enum EventType {
    Interview = 0,
    VideoConference = 1,
    Meeting = 2,
    Ride = 3,
}

export abstract class BaseEvent implements IBaseEvent {

    constructor(data?: IBaseEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): BaseEvent {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEvent' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IBaseEvent {
}

export enum JobCategory {
    It = 0,
    Jurisprudence = 1,
    Management = 2,
    Economy = 3,
    Marketing = 4,
}

export class CandidateJobProcessing extends BaseAuditableEntity implements ICandidateJobProcessing {
    processingStatus?: CandidateStatus;
    candidate?: Candidate;
    job?: Job;

    constructor(data?: ICandidateJobProcessing) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.processingStatus = _data["processingStatus"];
            this.candidate = _data["candidate"] ? Candidate.fromJS(_data["candidate"]) : <any>undefined;
            this.job = _data["job"] ? Job.fromJS(_data["job"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): CandidateJobProcessing {
        data = typeof data === 'object' ? data : {};
        let result = new CandidateJobProcessing();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["processingStatus"] = this.processingStatus;
        data["candidate"] = this.candidate ? this.candidate.toJSON() : <any>undefined;
        data["job"] = this.job ? this.job.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ICandidateJobProcessing extends IBaseAuditableEntity {
    processingStatus?: CandidateStatus;
    candidate?: Candidate;
    job?: Job;
}

export enum CandidateStatus {
    CvCreated = 0,
    CvApproved = 1,
    InterviewScheduled = 2,
    InterviewCompleted = 3,
    Hired = 4,
    Denied = 5,
}

export class AddCandidateCommand implements IAddCandidateCommand {
    name?: string;
    lastName?: string;
    middleName?: string;
    email?: string;
    phone?: string;
    address?: string;
    birthDate?: Date;
    workExperience?: number;
    lastJob?: string;
    education?: string;
    photo?: string | undefined;
    jobs?: Job[];

    constructor(data?: IAddCandidateCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.address = _data["address"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.workExperience = _data["workExperience"];
            this.lastJob = _data["lastJob"];
            this.education = _data["education"];
            this.photo = _data["photo"];
            if (Array.isArray(_data["jobs"])) {
                this.jobs = [] as any;
                for (let item of _data["jobs"])
                    this.jobs!.push(Job.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddCandidateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddCandidateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["address"] = this.address;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["workExperience"] = this.workExperience;
        data["lastJob"] = this.lastJob;
        data["education"] = this.education;
        data["photo"] = this.photo;
        if (Array.isArray(this.jobs)) {
            data["jobs"] = [];
            for (let item of this.jobs)
                data["jobs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAddCandidateCommand {
    name?: string;
    lastName?: string;
    middleName?: string;
    email?: string;
    phone?: string;
    address?: string;
    birthDate?: Date;
    workExperience?: number;
    lastJob?: string;
    education?: string;
    photo?: string | undefined;
    jobs?: Job[];
}

export class UpdateCandidateByIdCommand implements IUpdateCandidateByIdCommand {
    id?: number;
    name?: string;
    lastName?: string;
    middleName?: string;
    email?: string;
    phone?: string;
    address?: string;
    workExperience?: number;
    lastJob?: string;
    education?: string;
    photo?: string | undefined;
    cvs?: Cv[];

    constructor(data?: IUpdateCandidateByIdCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.address = _data["address"];
            this.workExperience = _data["workExperience"];
            this.lastJob = _data["lastJob"];
            this.education = _data["education"];
            this.photo = _data["photo"];
            if (Array.isArray(_data["cvs"])) {
                this.cvs = [] as any;
                for (let item of _data["cvs"])
                    this.cvs!.push(Cv.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateCandidateByIdCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCandidateByIdCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["address"] = this.address;
        data["workExperience"] = this.workExperience;
        data["lastJob"] = this.lastJob;
        data["education"] = this.education;
        data["photo"] = this.photo;
        if (Array.isArray(this.cvs)) {
            data["cvs"] = [];
            for (let item of this.cvs)
                data["cvs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateCandidateByIdCommand {
    id?: number;
    name?: string;
    lastName?: string;
    middleName?: string;
    email?: string;
    phone?: string;
    address?: string;
    workExperience?: number;
    lastJob?: string;
    education?: string;
    photo?: string | undefined;
    cvs?: Cv[];
}

export class StatisticByPriority implements IStatisticByPriority {
    level?: PriorityLevel;
    opened?: number;
    all?: number;

    constructor(data?: IStatisticByPriority) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.level = _data["level"];
            this.opened = _data["opened"];
            this.all = _data["all"];
        }
    }

    static fromJS(data: any): StatisticByPriority {
        data = typeof data === 'object' ? data : {};
        let result = new StatisticByPriority();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level;
        data["opened"] = this.opened;
        data["all"] = this.all;
        return data;
    }
}

export interface IStatisticByPriority {
    level?: PriorityLevel;
    opened?: number;
    all?: number;
}

export class CreateJobCommand implements ICreateJobCommand {
    title?: string;
    priorityLevel?: PriorityLevel;
    status?: JobStatus;
    publicationDate?: Date;
    category?: JobCategory;
    recruiterId?: number;

    constructor(data?: ICreateJobCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.priorityLevel = _data["priorityLevel"];
            this.status = _data["status"];
            this.publicationDate = _data["publicationDate"] ? new Date(_data["publicationDate"].toString()) : <any>undefined;
            this.category = _data["category"];
            this.recruiterId = _data["recruiterId"];
        }
    }

    static fromJS(data: any): CreateJobCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateJobCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["priorityLevel"] = this.priorityLevel;
        data["status"] = this.status;
        data["publicationDate"] = this.publicationDate ? this.publicationDate.toISOString() : <any>undefined;
        data["category"] = this.category;
        data["recruiterId"] = this.recruiterId;
        return data;
    }
}

export interface ICreateJobCommand {
    title?: string;
    priorityLevel?: PriorityLevel;
    status?: JobStatus;
    publicationDate?: Date;
    category?: JobCategory;
    recruiterId?: number;
}

export class UpdateJobCommand implements IUpdateJobCommand {
    id?: number;
    title?: string;
    priorityLevel?: PriorityLevel;
    status?: JobStatus;
    recruiterId?: number;
    category?: JobCategory;
    closingDate?: Date | undefined;

    constructor(data?: IUpdateJobCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.priorityLevel = _data["priorityLevel"];
            this.status = _data["status"];
            this.recruiterId = _data["recruiterId"];
            this.category = _data["category"];
            this.closingDate = _data["closingDate"] ? new Date(_data["closingDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateJobCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateJobCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["priorityLevel"] = this.priorityLevel;
        data["status"] = this.status;
        data["recruiterId"] = this.recruiterId;
        data["category"] = this.category;
        data["closingDate"] = this.closingDate ? this.closingDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateJobCommand {
    id?: number;
    title?: string;
    priorityLevel?: PriorityLevel;
    status?: JobStatus;
    recruiterId?: number;
    category?: JobCategory;
    closingDate?: Date | undefined;
}

export class CreateRecruiterCommand implements ICreateRecruiterCommand {
    name?: string;
    lastName?: string;
    middleName?: string;
    email?: string;
    phone?: string;
    workExperience?: number;
    jobs?: Job[];

    constructor(data?: ICreateRecruiterCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.workExperience = _data["workExperience"];
            if (Array.isArray(_data["jobs"])) {
                this.jobs = [] as any;
                for (let item of _data["jobs"])
                    this.jobs!.push(Job.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateRecruiterCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRecruiterCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["workExperience"] = this.workExperience;
        if (Array.isArray(this.jobs)) {
            data["jobs"] = [];
            for (let item of this.jobs)
                data["jobs"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreateRecruiterCommand {
    name?: string;
    lastName?: string;
    middleName?: string;
    email?: string;
    phone?: string;
    workExperience?: number;
    jobs?: Job[];
}

export class UpdateRecruiterCommand implements IUpdateRecruiterCommand {
    id?: number;
    name?: string;
    lastName?: string;
    middleName?: string;
    email?: string;
    phone?: string;
    workExperience?: number;
    jobs?: Job[];
    interviews?: Interview[];

    constructor(data?: IUpdateRecruiterCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.workExperience = _data["workExperience"];
            if (Array.isArray(_data["jobs"])) {
                this.jobs = [] as any;
                for (let item of _data["jobs"])
                    this.jobs!.push(Job.fromJS(item));
            }
            if (Array.isArray(_data["interviews"])) {
                this.interviews = [] as any;
                for (let item of _data["interviews"])
                    this.interviews!.push(Interview.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateRecruiterCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRecruiterCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["workExperience"] = this.workExperience;
        if (Array.isArray(this.jobs)) {
            data["jobs"] = [];
            for (let item of this.jobs)
                data["jobs"].push(item.toJSON());
        }
        if (Array.isArray(this.interviews)) {
            data["interviews"] = [];
            for (let item of this.interviews)
                data["interviews"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateRecruiterCommand {
    id?: number;
    name?: string;
    lastName?: string;
    middleName?: string;
    email?: string;
    phone?: string;
    workExperience?: number;
    jobs?: Job[];
    interviews?: Interview[];
}

export class SetInterviewCommand implements ISetInterviewCommand {
    candidateId?: number;
    jobId?: number;
    timing?: Date;
    type?: EventType;

    constructor(data?: ISetInterviewCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.candidateId = _data["candidateId"];
            this.jobId = _data["jobId"];
            this.timing = _data["timing"] ? new Date(_data["timing"].toString()) : <any>undefined;
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): SetInterviewCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SetInterviewCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["candidateId"] = this.candidateId;
        data["jobId"] = this.jobId;
        data["timing"] = this.timing ? this.timing.toISOString() : <any>undefined;
        data["type"] = this.type;
        return data;
    }
}

export interface ISetInterviewCommand {
    candidateId?: number;
    jobId?: number;
    timing?: Date;
    type?: EventType;
}

export class SetCandidateStatusCommand implements ISetCandidateStatusCommand {
    processingId?: number;
    newStatus?: CandidateStatus;

    constructor(data?: ISetCandidateStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.processingId = _data["processingId"];
            this.newStatus = _data["newStatus"];
        }
    }

    static fromJS(data: any): SetCandidateStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SetCandidateStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["processingId"] = this.processingId;
        data["newStatus"] = this.newStatus;
        return data;
    }
}

export interface ISetCandidateStatusCommand {
    processingId?: number;
    newStatus?: CandidateStatus;
}

export class Note extends BaseAuditableEntity implements INote {
    text?: string;
    completed?: boolean;

    constructor(data?: INote) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.text = _data["text"];
            this.completed = _data["completed"];
        }
    }

    static override fromJS(data: any): Note {
        data = typeof data === 'object' ? data : {};
        let result = new Note();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["completed"] = this.completed;
        super.toJSON(data);
        return data;
    }
}

export interface INote extends IBaseAuditableEntity {
    text?: string;
    completed?: boolean;
}

export class CreateNoteCommand implements ICreateNoteCommand {
    text?: string;

    constructor(data?: ICreateNoteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): CreateNoteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNoteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        return data;
    }
}

export interface ICreateNoteCommand {
    text?: string;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}